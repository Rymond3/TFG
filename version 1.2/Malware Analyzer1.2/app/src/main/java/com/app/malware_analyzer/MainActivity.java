package com.app.malware_analyzer;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Bundle;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import android.os.Parcel;
import android.os.Parcelable;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.SearchView;
import android.widget.TextView;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.io.FileInputStream;
import java.io.File;

public class MainActivity extends AppCompatActivity {

    private List<PackageInfo> installedApps;
    private AppAdapter installedAppAdapter;
    ListView userInstalledApps;
    private static final String TAG = "MyActivity";


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        userInstalledApps = findViewById(R.id.installed_app_list);

        installedApps = getInstalledApps();
        installedAppAdapter = new AppAdapter(MainActivity.this, installedApps);
        userInstalledApps.setAdapter(installedAppAdapter);
        userInstalledApps.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {

                PackageInfo app = installedApps.get(i);

                PackageManager pm = getPackageManager();
                List<PackageInfo> packs = pm.getInstalledPackages(PackageManager.GET_PERMISSIONS);

                for (int j = 0; j < packs.size(); j++) {
                    if(packs.get(j).applicationInfo.sourceDir.equals(app.applicationInfo.sourceDir)) {
                        Intent intent = new Intent(getApplicationContext(), AppDetails.class);
                        intent.putExtra("app", packs.get(j));
                        startActivity(intent);
                    }
                }

            }
        });

        //Total Number of Installed-Apps(i.e. List Size)
        String  abc = userInstalledApps.getCount()+"";
        TextView countApps = findViewById(R.id.countApps);
        countApps.setText("Total Installed Apps: "+abc);
        Toast.makeText(this, abc+" Apps", Toast.LENGTH_SHORT).show();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.nav_menu, menu);

        MenuItem item = menu.findItem(R.id.nav_search);
        SearchView view = (SearchView) item.getActionView();
        view.setQueryHint("Buscar aplicaciones");

        view.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                installedAppAdapter.getFilter().filter(newText);
                return true;
            }
        });

        return super.onCreateOptionsMenu(menu);
    }

    //Return a list of the installed apps
    private List<PackageInfo> getInstalledApps() {
        PackageManager pm = getPackageManager();
        List<PackageInfo> apps = new ArrayList<>();//return
        List<PackageInfo> packs = pm.getInstalledPackages(0);
        for (int i = 0; i < packs.size(); i++) {
            PackageInfo p = packs.get(i);
            if ((!isSystemPackage(p))) {
                apps.add(p);
            }
        }

        Collections.sort(apps, new Comparator<PackageInfo>() {
            @Override
            public int compare(PackageInfo app2, PackageInfo app1)
            {
                return  app2.applicationInfo.loadLabel(getPackageManager()).toString().compareToIgnoreCase(app1.applicationInfo.loadLabel(getPackageManager()).toString());
            }
        });
        return apps;
    }


    private boolean isSystemPackage(PackageInfo pkgInfo) {
        return (pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
    }

    public class AppAdapter extends BaseAdapter implements Filterable {

        public LayoutInflater layoutInflater;
        public List<PackageInfo> listStorage;
        public List<PackageInfo> temporarylist;

        public AppAdapter(Context context, List<PackageInfo> customizedListView) {
            layoutInflater =(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            listStorage = customizedListView;
            temporarylist = customizedListView;
        }

        @Override
        public int getCount() {
            return listStorage.size();
        }

        @Override
        public Object getItem(int position) {
            return position;
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {

            ViewHolder listViewHolder;
            if(convertView == null){
                listViewHolder = new ViewHolder();
                convertView = layoutInflater.inflate(R.layout.installed_app_list, parent, false);

                listViewHolder.textInListView = convertView.findViewById(R.id.list_app_name);
                listViewHolder.imageInListView = convertView.findViewById(R.id.app_icon);
                listViewHolder.packageInListView=convertView.findViewById(R.id.list_app_package);

                convertView.setTag(listViewHolder);
            }else{
                listViewHolder = (ViewHolder)convertView.getTag();
            }
            listViewHolder.textInListView.setText(listStorage.get(position).applicationInfo.loadLabel(getPackageManager()));
            listViewHolder.imageInListView.setImageDrawable(listStorage.get(position).applicationInfo.loadIcon(getPackageManager()));
            listViewHolder.packageInListView.setText("Version " + listStorage.get(position).versionName);

            return convertView;
        }

        @Override
        public Filter getFilter() {
            Filter filter = new Filter() {

                @SuppressWarnings("unchecked")
                @Override
                protected void publishResults(CharSequence constraint, FilterResults results) {
                    temporarylist=(List<PackageInfo>)results.values;
                    notifyDataSetChanged();
                }

                @Override
                protected FilterResults performFiltering(CharSequence constraint) {
                    FilterResults results = new FilterResults();
                    List<PackageInfo> FilteredList= new ArrayList<>();
                    if (constraint == null || constraint.length() == 0) {
                        // No filter implemented we return all the list
                        results.values = listStorage;
                        results.count = listStorage.size();
                    }
                    else {
                        for (int i = 0; i < listStorage.size(); i++) {
                            PackageInfo data = listStorage.get(i);
                            if (data.applicationInfo.loadLabel(getPackageManager()).toString().toLowerCase().contains(constraint.toString()))  {
                                FilteredList.add(data);
                            }
                        }
                        results.values = FilteredList;
                        results.count = FilteredList.size();
                    }
                    return results;
                }
            };
            return filter;
        }

        class ViewHolder{
            TextView textInListView;
            ImageView imageInListView;
            TextView packageInListView;
        }
    }


}